#!/bin/bash

# Reload the shell
alias reload='exec "$SHELL"'

# Clear the terminal
alias cls='clear'

# list globally installed npm packages
alias npm-list='npm ls -g --depth 0'

# list including hidden
alias lso='ls -A'

# list in columns with properties and human readable
alias ll='ls -lFhL'

# list including hidden in columns with properties and human readable
alias llo='ls -AlFhL'

# list including hidden in columns with propertiesm, human readable and Sym Links
alias llos='ls -la'

# list including in columns with propertiesm, human readable and Sym Links
alias lls='ls -l'

# Alias vim to nvim for convenience
alias vim='nvim'


##########################
# Experimental Reload Env
##########################

# Reloads the current Python virtual environment
function reload-env {
    if [[ -z "${1}" ]]
    then
        >&2 echo "== name attr has not been set \n"
        return 0
    fi

    echo "== deactivating Env \n" && \
    pyenv deactivate && \
    echo "== deleting Env \n" && \
    pyenv virtualenv-delete -f $1 && \
    echo "== recreating Env \n" && \
    pyenv virtualenv 3.7.12 $1 && \
    echo "== activating Env \n" && \
    pyenv activate $1
}


######################
# Tmux Initialization
######################

# Inicia tmux automaticamente se n찾o estiver dentro de uma sess찾o tmux
# Inicia ou conecta ao tmux automaticamente, evitando sess천es duplicadas
# if command -v tmux >/dev/null 2>&1; then
#  if [ -z "$TMUX" ]; then
#    tmux has-session -t default 2>/dev/null
#    if [ $? -eq 0 ]; then
#      exec tmux attach-session -t default
#    else
#      exec tmux new-session -s default
#    fi
#  fi
#fi



############################
# AutoInstall FiraCode Font 
############################

font="FiraCode"
# font_dir="$HOME/.local/share/fonts/$font"
if [[ "$OSTYPE" == "darwin"* ]]; then
    font_dir="$HOME/Library/Fonts/$font"
else
    font_dir="$HOME/.local/share/fonts/$font"
fi

if [ ! -d "$font_dir" ] || [ -z "$(find "$font_dir" -iname '*.ttf' -o -iname '*.otf' 2>/dev/null)" ]; then
    echo "Instalando a fonte $font..."
    mkdir -p "$font_dir"
    tmp_file="/tmp/${font}.zip"
    url="https://github.com/ryanoasis/nerd-fonts/releases/latest/download/${font}.zip"
    if command -v wget >/dev/null 2>&1; then
        wget -O "$tmp_file" "$url"
    else
        curl -L -o "$tmp_file" "$url"
    fi
    unzip -o "$tmp_file" -d "$font_dir"
    rm "$tmp_file"

    # Atualiza cache s처 no Linux
    if [[ "$OSTYPE" != "darwin"* ]]; then
        fc-cache -fv
    fi

    echo "Fonte $font instalada com sucesso."
fi



############################
# List Custom Aliases and Functions
############################

# List all custom aliases and functions from dot-files
list-customs() {
    local dir="$HOME/.universal/dot-files"
    local file
    for file in "$dir"/*; do
        [[ -f "$file" ]] || continue

        local header_printed=false
        local prev=""

        while IFS= read -r line || [[ -n "$line" ]]; do
            if [[ $line =~ ^alias ]] || [[ $line =~ ^function ]] || [[ $line =~ ^[[:alnum:]_]+\(\) ]]; then
                if [[ $header_printed == false ]]; then
                    printf '\n== %s ==\n' "$file"
                    header_printed=true
                fi

                if [[ $prev =~ ^# ]]; then
                    echo "$prev"
                    printf '  %s\n' "$prev"
                fi
                # print the signature only
                echo "$line"
                printf '  %s\n' "$line"
            fi
            prev="$line"
        done < "$file"

        if [[ $header_printed == true ]]; then
            echo
        fi
    done
}
