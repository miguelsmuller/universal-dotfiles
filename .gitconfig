[user]
    email = miguelsmuller@users.noreply.github.com
    name = Miguel Muller
	signingkey = 0FB4023188098C79
[core]
    # editor = code --wait
    autocrlf = input
	excludesfile = /home/miguel-neto/.gitignore_global
    #pager = cat
[pager]
    branch = false
[init]
	defaultBranch = main
[push]
    autoSetupRemote = true
[alias]
    # [system] who am I? IT'S A ME, MARIO! :)
    me = config user.name
    # [system] status - short version(current branch and files modified)
    sts = status -sb

    # [branch] checkout to a branch
    cho = checkout
    # [branch] chechout to a master branch
    chm = checkout master
    # [branch] create a branch and chechout
    chn = checkout -b

    #stsh = stash --include-untracked
    st = stash --all

    st-ls = stash list
    st-ap = stash apply
    

    # [commit] commit and all     "!git add -A && git commit -m"
    coa = "!f() { if [ \"$*\" ]; then git add -A && git commit -m \"$*\"; fi }; f"        
    # [commit] simple commit - need params
    cmi = "!f() { if [ \"$*\" ]; then git commit -m \"$*\"; fi }; f"                       
    # [commit] fix last commit message - before push - need params
    cma = "!f() { if [ \"$*\" ]; then git commit -m \"$*\" --amend; fi }; f" 
    # [commit] undo last commit keeping the changes
    rollback = reset --soft HEAD~1
    # [commit] rebase commit into one
    rb = "!f() { if [ \"$*\" ]; then git rebase -i HEAD~\"$*\"; fi }; f" 

    # [file] remove file from staging area  - need params
    unstage = reset HEAD --
    # [file] back the file to the original version of the commit  - need params
    undo = checkout -- 

    # [history] log - short version(hash, message)
    ls = log --oneline -n 10
    # [history] log - short version(hash, time, author, message)
    ll = log --pretty=format:'%Cred%h%Creset %C(bold)%cr%Creset %Cgreen<%an>%Creset %s' --max-count=30
    # [history] show history in tree
    hist = log --oneline --graph --decorate --all

    # [changes] show files modified on commit
    show = show --name-only
    # [changes] remote commits not present locally
    incoming = !(git fetch --quiet && git log --pretty=format:'%C(yellow)%h %C(white)- %C(red)%an %C(white)- %C(cyan)%d%Creset %s %C(white)- %ar%Creset' ..@{u})
    # [changes] local commits not present remote
    outgoing = !(git fetch --quiet && git log --pretty=format:'%C(yellow)%h %C(white)- %C(red)%an %C(white)- %C(cyan)%d%Creset %s %C(white)- %ar%Creset' @{u}..)


    # clear branchs
    clear = remote update origin --prune
    # [remote] push master
    pom = "!f() { git push -u origin \"$1\"; }; f"
    # pom = !(git push -u origin master)
    # [remote] push staging
    pos = !(git push -u origin staging)
    # [remote] push development
    pod = !(git push -u origin development)
    # [remote] syncronize local branchs with remote
    fth = fetch origin
    # [remote] complete pull (with submodules)
    pus = !(git pull && git submodule foreach git pull origin master)

    # git reset --hard origin/dev
    prune = fetch -p

    update = rebase -i main
[pager]
	branch = false
    log = true
[format]
	pretty = oneline
[submodule]
	recurse = true
[commit]
	gpgsign = true
